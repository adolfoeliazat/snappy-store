/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_DateTime.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


DateTime::~DateTime() noexcept {
}


void DateTime::__set_secsSinceEpoch(const int64_t val) {
  this->secsSinceEpoch = val;
}

uint32_t DateTime::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_secsSinceEpoch = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->secsSinceEpoch);
          isset_secsSinceEpoch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_secsSinceEpoch)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t DateTime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DateTime");

  xfer += oprot->writeFieldBegin("secsSinceEpoch", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->secsSinceEpoch);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DateTime &a, DateTime &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.secsSinceEpoch, b.secsSinceEpoch);
}

DateTime::DateTime(const DateTime& other208) {
  secsSinceEpoch = other208.secsSinceEpoch;
}
DateTime::DateTime( DateTime&& other209) noexcept {
  secsSinceEpoch = std::move(other209.secsSinceEpoch);
}
DateTime& DateTime::operator=(const DateTime& other210) {
  secsSinceEpoch = other210.secsSinceEpoch;
  return *this;
}
DateTime& DateTime::operator=(DateTime&& other211) noexcept {
  secsSinceEpoch = std::move(other211.secsSinceEpoch);
  return *this;
}
void DateTime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DateTime(";
  out << "secsSinceEpoch=" << to_string(secsSinceEpoch);
  out << ")";
}

}}} // namespace
