/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_JSONValue.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


JSONValue::~JSONValue() noexcept {
}


void JSONValue::__set_string_val(const std::string& val) {
  this->string_val = val;
__isset.string_val = true;
}

void JSONValue::__set_bool_val(const bool val) {
  this->bool_val = val;
__isset.bool_val = true;
}

void JSONValue::__set_i32_val(const int32_t val) {
  this->i32_val = val;
__isset.i32_val = true;
}

void JSONValue::__set_i64_val(const int64_t val) {
  this->i64_val = val;
__isset.i64_val = true;
}

void JSONValue::__set_double_val(const double val) {
  this->double_val = val;
__isset.double_val = true;
}

void JSONValue::__set_object_val(const std::map<std::string, JSONValue> & val) {
  this->object_val = val;
__isset.object_val = true;
}

void JSONValue::__set_array_val(const std::vector<JSONValue> & val) {
  this->array_val = val;
__isset.array_val = true;
}

void JSONValue::__set_null_val(const bool val) {
  this->null_val = val;
__isset.null_val = true;
}

uint32_t JSONValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_val);
          this->__isset.string_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_val);
          this->__isset.bool_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_val);
          this->__isset.i32_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_val);
          this->__isset.i64_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_val);
          this->__isset.double_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->object_val.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _ktype9;
            ::apache::thrift::protocol::TType _vtype10;
            xfer += iprot->readMapBegin(_ktype9, _vtype10, _size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              std::string _key13;
              xfer += iprot->readString(_key13);
              JSONValue& _val14 = this->object_val[_key13];
              xfer += _val14.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.object_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->array_val.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->array_val.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->array_val[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.array_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->null_val);
          this->__isset.null_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JSONValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JSONValue");

  if (this->__isset.string_val) {
    xfer += oprot->writeFieldBegin("string_val", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->string_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bool_val) {
    xfer += oprot->writeFieldBegin("bool_val", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->bool_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i32_val) {
    xfer += oprot->writeFieldBegin("i32_val", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->i32_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_val) {
    xfer += oprot->writeFieldBegin("i64_val", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->i64_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_val) {
    xfer += oprot->writeFieldBegin("double_val", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->double_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.object_val) {
    xfer += oprot->writeFieldBegin("object_val", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->object_val.size()));
      std::map<std::string, JSONValue> ::const_iterator _iter20;
      for (_iter20 = this->object_val.begin(); _iter20 != this->object_val.end(); ++_iter20)
      {
        xfer += oprot->writeString(_iter20->first);
        xfer += _iter20->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.array_val) {
    xfer += oprot->writeFieldBegin("array_val", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->array_val.size()));
      std::vector<JSONValue> ::const_iterator _iter21;
      for (_iter21 = this->array_val.begin(); _iter21 != this->array_val.end(); ++_iter21)
      {
        xfer += (*_iter21).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.null_val) {
    xfer += oprot->writeFieldBegin("null_val", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->null_val);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JSONValue &a, JSONValue &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.string_val, b.string_val);
  swap(a.bool_val, b.bool_val);
  swap(a.i32_val, b.i32_val);
  swap(a.i64_val, b.i64_val);
  swap(a.double_val, b.double_val);
  swap(a.object_val, b.object_val);
  swap(a.array_val, b.array_val);
  swap(a.null_val, b.null_val);
  swap(a.__isset, b.__isset);
}

JSONValue::JSONValue(const JSONValue& other22) {
  string_val = other22.string_val;
  bool_val = other22.bool_val;
  i32_val = other22.i32_val;
  i64_val = other22.i64_val;
  double_val = other22.double_val;
  object_val = other22.object_val;
  array_val = other22.array_val;
  null_val = other22.null_val;
  __isset = other22.__isset;
}
JSONValue::JSONValue( JSONValue&& other23) noexcept {
  string_val = std::move(other23.string_val);
  bool_val = std::move(other23.bool_val);
  i32_val = std::move(other23.i32_val);
  i64_val = std::move(other23.i64_val);
  double_val = std::move(other23.double_val);
  object_val = std::move(other23.object_val);
  array_val = std::move(other23.array_val);
  null_val = std::move(other23.null_val);
  __isset = std::move(other23.__isset);
}
JSONValue& JSONValue::operator=(const JSONValue& other24) {
  string_val = other24.string_val;
  bool_val = other24.bool_val;
  i32_val = other24.i32_val;
  i64_val = other24.i64_val;
  double_val = other24.double_val;
  object_val = other24.object_val;
  array_val = other24.array_val;
  null_val = other24.null_val;
  __isset = other24.__isset;
  return *this;
}
JSONValue& JSONValue::operator=(JSONValue&& other25) noexcept {
  string_val = std::move(other25.string_val);
  bool_val = std::move(other25.bool_val);
  i32_val = std::move(other25.i32_val);
  i64_val = std::move(other25.i64_val);
  double_val = std::move(other25.double_val);
  object_val = std::move(other25.object_val);
  array_val = std::move(other25.array_val);
  null_val = std::move(other25.null_val);
  __isset = std::move(other25.__isset);
  return *this;
}
void JSONValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "JSONValue(";
  out << "string_val="; (__isset.string_val ? (out << to_string(string_val)) : (out << "<null>"));
  out << ", " << "bool_val="; (__isset.bool_val ? (out << to_string(bool_val)) : (out << "<null>"));
  out << ", " << "i32_val="; (__isset.i32_val ? (out << to_string(i32_val)) : (out << "<null>"));
  out << ", " << "i64_val="; (__isset.i64_val ? (out << to_string(i64_val)) : (out << "<null>"));
  out << ", " << "double_val="; (__isset.double_val ? (out << to_string(double_val)) : (out << "<null>"));
  out << ", " << "object_val="; (__isset.object_val ? (out << to_string(object_val)) : (out << "<null>"));
  out << ", " << "array_val="; (__isset.array_val ? (out << to_string(array_val)) : (out << "<null>"));
  out << ", " << "null_val="; (__isset.null_val ? (out << to_string(null_val)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
