/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_RowSet.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


RowSet::~RowSet() noexcept {
}


void RowSet::__set_rows(const std::vector<Row> & val) {
  this->rows = val;
}

void RowSet::__set_flags(const int8_t val) {
  this->flags = val;
}

void RowSet::__set_cursorId(const int32_t val) {
  this->cursorId = val;
}

void RowSet::__set_statementId(const int32_t val) {
  this->statementId = val;
}

void RowSet::__set_connId(const int32_t val) {
  this->connId = val;
}

void RowSet::__set_token(const std::string& val) {
  this->token = val;
__isset.token = true;
}

void RowSet::__set_source(const HostAddress& val) {
  this->source = val;
__isset.source = true;
}

void RowSet::__set_offset(const int32_t val) {
  this->offset = val;
__isset.offset = true;
}

void RowSet::__set_metadata(const std::vector<ColumnDescriptor> & val) {
  this->metadata = val;
__isset.metadata = true;
}

void RowSet::__set_cursorName(const std::string& val) {
  this->cursorName = val;
__isset.cursorName = true;
}

void RowSet::__set_warnings(const SnappyExceptionData& val) {
  this->warnings = val;
__isset.warnings = true;
}

void RowSet::__set_rowIdsForUpdateOrDelete(const std::vector<int64_t> & val) {
  this->rowIdsForUpdateOrDelete = val;
__isset.rowIdsForUpdateOrDelete = true;
}

uint32_t RowSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_rows = false;
  bool isset_flags = false;
  bool isset_cursorId = false;
  bool isset_statementId = false;
  bool isset_connId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rows.clear();
            uint32_t _size263;
            ::apache::thrift::protocol::TType _etype266;
            xfer += iprot->readListBegin(_etype266, _size263);
            this->rows.resize(_size263);
            uint32_t _i267;
            for (_i267 = 0; _i267 < _size263; ++_i267)
            {
              xfer += this->rows[_i267].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_rows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->flags);
          isset_flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cursorId);
          isset_cursorId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->statementId);
          isset_statementId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->connId);
          isset_connId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->source.read(iprot);
          this->__isset.source = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->offset);
          this->__isset.offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->metadata.clear();
            uint32_t _size268;
            ::apache::thrift::protocol::TType _etype271;
            xfer += iprot->readListBegin(_etype271, _size268);
            this->metadata.resize(_size268);
            uint32_t _i272;
            for (_i272 = 0; _i272 < _size268; ++_i272)
            {
              xfer += this->metadata[_i272].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cursorName);
          this->__isset.cursorName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->warnings.read(iprot);
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->rowIdsForUpdateOrDelete.clear();
            uint32_t _size273;
            ::apache::thrift::protocol::TType _etype276;
            xfer += iprot->readListBegin(_etype276, _size273);
            this->rowIdsForUpdateOrDelete.resize(_size273);
            uint32_t _i277;
            for (_i277 = 0; _i277 < _size273; ++_i277)
            {
              xfer += iprot->readI64(this->rowIdsForUpdateOrDelete[_i277]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.rowIdsForUpdateOrDelete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_rows)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_flags)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cursorId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statementId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_connId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t RowSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RowSet");

  xfer += oprot->writeFieldBegin("rows", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->rows.size()));
    std::vector<Row> ::const_iterator _iter278;
    for (_iter278 = this->rows.begin(); _iter278 != this->rows.end(); ++_iter278)
    {
      xfer += (*_iter278).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("flags", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cursorId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cursorId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statementId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->statementId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connId", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->connId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.token) {
    xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->token);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.source) {
    xfer += oprot->writeFieldBegin("source", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->source.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.offset) {
    xfer += oprot->writeFieldBegin("offset", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->offset);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.metadata) {
    xfer += oprot->writeFieldBegin("metadata", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->metadata.size()));
      std::vector<ColumnDescriptor> ::const_iterator _iter279;
      for (_iter279 = this->metadata.begin(); _iter279 != this->metadata.end(); ++_iter279)
      {
        xfer += (*_iter279).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cursorName) {
    xfer += oprot->writeFieldBegin("cursorName", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->cursorName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->warnings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rowIdsForUpdateOrDelete) {
    xfer += oprot->writeFieldBegin("rowIdsForUpdateOrDelete", ::apache::thrift::protocol::T_LIST, 12);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->rowIdsForUpdateOrDelete.size()));
      std::vector<int64_t> ::const_iterator _iter280;
      for (_iter280 = this->rowIdsForUpdateOrDelete.begin(); _iter280 != this->rowIdsForUpdateOrDelete.end(); ++_iter280)
      {
        xfer += oprot->writeI64((*_iter280));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RowSet &a, RowSet &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.rows, b.rows);
  swap(a.flags, b.flags);
  swap(a.cursorId, b.cursorId);
  swap(a.statementId, b.statementId);
  swap(a.connId, b.connId);
  swap(a.token, b.token);
  swap(a.source, b.source);
  swap(a.offset, b.offset);
  swap(a.metadata, b.metadata);
  swap(a.cursorName, b.cursorName);
  swap(a.warnings, b.warnings);
  swap(a.rowIdsForUpdateOrDelete, b.rowIdsForUpdateOrDelete);
  swap(a.__isset, b.__isset);
}

RowSet::RowSet(const RowSet& other281) {
  rows = other281.rows;
  flags = other281.flags;
  cursorId = other281.cursorId;
  statementId = other281.statementId;
  connId = other281.connId;
  token = other281.token;
  source = other281.source;
  offset = other281.offset;
  metadata = other281.metadata;
  cursorName = other281.cursorName;
  warnings = other281.warnings;
  rowIdsForUpdateOrDelete = other281.rowIdsForUpdateOrDelete;
  __isset = other281.__isset;
}
RowSet::RowSet( RowSet&& other282) noexcept {
  rows = std::move(other282.rows);
  flags = std::move(other282.flags);
  cursorId = std::move(other282.cursorId);
  statementId = std::move(other282.statementId);
  connId = std::move(other282.connId);
  token = std::move(other282.token);
  source = std::move(other282.source);
  offset = std::move(other282.offset);
  metadata = std::move(other282.metadata);
  cursorName = std::move(other282.cursorName);
  warnings = std::move(other282.warnings);
  rowIdsForUpdateOrDelete = std::move(other282.rowIdsForUpdateOrDelete);
  __isset = std::move(other282.__isset);
}
RowSet& RowSet::operator=(const RowSet& other283) {
  rows = other283.rows;
  flags = other283.flags;
  cursorId = other283.cursorId;
  statementId = other283.statementId;
  connId = other283.connId;
  token = other283.token;
  source = other283.source;
  offset = other283.offset;
  metadata = other283.metadata;
  cursorName = other283.cursorName;
  warnings = other283.warnings;
  rowIdsForUpdateOrDelete = other283.rowIdsForUpdateOrDelete;
  __isset = other283.__isset;
  return *this;
}
RowSet& RowSet::operator=(RowSet&& other284) noexcept {
  rows = std::move(other284.rows);
  flags = std::move(other284.flags);
  cursorId = std::move(other284.cursorId);
  statementId = std::move(other284.statementId);
  connId = std::move(other284.connId);
  token = std::move(other284.token);
  source = std::move(other284.source);
  offset = std::move(other284.offset);
  metadata = std::move(other284.metadata);
  cursorName = std::move(other284.cursorName);
  warnings = std::move(other284.warnings);
  rowIdsForUpdateOrDelete = std::move(other284.rowIdsForUpdateOrDelete);
  __isset = std::move(other284.__isset);
  return *this;
}
void RowSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RowSet(";
  out << "rows=" << to_string(rows);
  out << ", " << "flags=" << to_string(flags);
  out << ", " << "cursorId=" << to_string(cursorId);
  out << ", " << "statementId=" << to_string(statementId);
  out << ", " << "connId=" << to_string(connId);
  out << ", " << "token="; (__isset.token ? (out << to_string(token)) : (out << "<null>"));
  out << ", " << "source="; (__isset.source ? (out << to_string(source)) : (out << "<null>"));
  out << ", " << "offset="; (__isset.offset ? (out << to_string(offset)) : (out << "<null>"));
  out << ", " << "metadata="; (__isset.metadata ? (out << to_string(metadata)) : (out << "<null>"));
  out << ", " << "cursorName="; (__isset.cursorName ? (out << to_string(cursorName)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ", " << "rowIdsForUpdateOrDelete="; (__isset.rowIdsForUpdateOrDelete ? (out << to_string(rowIdsForUpdateOrDelete)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
