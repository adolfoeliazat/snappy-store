/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "snappydata_struct_PrepareResult.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace io { namespace snappydata { namespace thrift {


PrepareResult::~PrepareResult() noexcept {
}


void PrepareResult::__set_statementId(const int32_t val) {
  this->statementId = val;
}

void PrepareResult::__set_statementType(const int8_t val) {
  this->statementType = val;
}

void PrepareResult::__set_parameterMetaData(const std::vector<ColumnDescriptor> & val) {
  this->parameterMetaData = val;
}

void PrepareResult::__set_resultSetMetaData(const std::vector<ColumnDescriptor> & val) {
  this->resultSetMetaData = val;
__isset.resultSetMetaData = true;
}

void PrepareResult::__set_warnings(const SnappyExceptionData& val) {
  this->warnings = val;
__isset.warnings = true;
}

uint32_t PrepareResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_statementId = false;
  bool isset_statementType = false;
  bool isset_parameterMetaData = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->statementId);
          isset_statementId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->statementType);
          isset_statementType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->parameterMetaData.clear();
            uint32_t _size285;
            ::apache::thrift::protocol::TType _etype288;
            xfer += iprot->readListBegin(_etype288, _size285);
            this->parameterMetaData.resize(_size285);
            uint32_t _i289;
            for (_i289 = 0; _i289 < _size285; ++_i289)
            {
              xfer += this->parameterMetaData[_i289].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_parameterMetaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultSetMetaData.clear();
            uint32_t _size290;
            ::apache::thrift::protocol::TType _etype293;
            xfer += iprot->readListBegin(_etype293, _size290);
            this->resultSetMetaData.resize(_size290);
            uint32_t _i294;
            for (_i294 = 0; _i294 < _size290; ++_i294)
            {
              xfer += this->resultSetMetaData[_i294].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultSetMetaData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->warnings.read(iprot);
          this->__isset.warnings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_statementId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_statementType)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_parameterMetaData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PrepareResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PrepareResult");

  xfer += oprot->writeFieldBegin("statementId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->statementId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("statementType", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->statementType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parameterMetaData", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->parameterMetaData.size()));
    std::vector<ColumnDescriptor> ::const_iterator _iter295;
    for (_iter295 = this->parameterMetaData.begin(); _iter295 != this->parameterMetaData.end(); ++_iter295)
    {
      xfer += (*_iter295).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.resultSetMetaData) {
    xfer += oprot->writeFieldBegin("resultSetMetaData", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resultSetMetaData.size()));
      std::vector<ColumnDescriptor> ::const_iterator _iter296;
      for (_iter296 = this->resultSetMetaData.begin(); _iter296 != this->resultSetMetaData.end(); ++_iter296)
      {
        xfer += (*_iter296).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.warnings) {
    xfer += oprot->writeFieldBegin("warnings", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->warnings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PrepareResult &a, PrepareResult &b) noexcept {
  using ::std::swap;
  static_assert(noexcept(swap(a, b)), "throwing swap");
  swap(a.statementId, b.statementId);
  swap(a.statementType, b.statementType);
  swap(a.parameterMetaData, b.parameterMetaData);
  swap(a.resultSetMetaData, b.resultSetMetaData);
  swap(a.warnings, b.warnings);
  swap(a.__isset, b.__isset);
}

PrepareResult::PrepareResult(const PrepareResult& other297) {
  statementId = other297.statementId;
  statementType = other297.statementType;
  parameterMetaData = other297.parameterMetaData;
  resultSetMetaData = other297.resultSetMetaData;
  warnings = other297.warnings;
  __isset = other297.__isset;
}
PrepareResult::PrepareResult( PrepareResult&& other298) noexcept {
  statementId = std::move(other298.statementId);
  statementType = std::move(other298.statementType);
  parameterMetaData = std::move(other298.parameterMetaData);
  resultSetMetaData = std::move(other298.resultSetMetaData);
  warnings = std::move(other298.warnings);
  __isset = std::move(other298.__isset);
}
PrepareResult& PrepareResult::operator=(const PrepareResult& other299) {
  statementId = other299.statementId;
  statementType = other299.statementType;
  parameterMetaData = other299.parameterMetaData;
  resultSetMetaData = other299.resultSetMetaData;
  warnings = other299.warnings;
  __isset = other299.__isset;
  return *this;
}
PrepareResult& PrepareResult::operator=(PrepareResult&& other300) noexcept {
  statementId = std::move(other300.statementId);
  statementType = std::move(other300.statementType);
  parameterMetaData = std::move(other300.parameterMetaData);
  resultSetMetaData = std::move(other300.resultSetMetaData);
  warnings = std::move(other300.warnings);
  __isset = std::move(other300.__isset);
  return *this;
}
void PrepareResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PrepareResult(";
  out << "statementId=" << to_string(statementId);
  out << ", " << "statementType=" << to_string(statementType);
  out << ", " << "parameterMetaData=" << to_string(parameterMetaData);
  out << ", " << "resultSetMetaData="; (__isset.resultSetMetaData ? (out << to_string(resultSetMetaData)) : (out << "<null>"));
  out << ", " << "warnings="; (__isset.warnings ? (out << to_string(warnings)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
