/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_JSONOBJECT_H
#define SNAPPYDATA_STRUCT_JSONOBJECT_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_Timestamp.h"
#include "snappydata_struct_JSONValue.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _JSONObject__isset {
  _JSONObject__isset() : pairs(false), array(false) {}
  bool pairs :1;
  bool array :1;
} _JSONObject__isset;

class JSONObject {
 public:

  JSONObject(const JSONObject&);
  JSONObject(JSONObject&&) noexcept;
  JSONObject& operator=(const JSONObject&);
  JSONObject& operator=(JSONObject&&) noexcept;
  JSONObject() {
  }

  virtual ~JSONObject() noexcept;
  std::map<std::string, JSONValue>  pairs;
  std::vector<JSONValue>  array;

  _JSONObject__isset __isset;

  void __set_pairs(const std::map<std::string, JSONValue> & val);

  void __set_array(const std::vector<JSONValue> & val);

  bool operator == (const JSONObject & rhs) const
  {
    if (__isset.pairs != rhs.__isset.pairs)
      return false;
    else if (__isset.pairs && !(pairs == rhs.pairs))
      return false;
    if (__isset.array != rhs.__isset.array)
      return false;
    else if (__isset.array && !(array == rhs.array))
      return false;
    return true;
  }
  bool operator != (const JSONObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JSONObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(JSONObject &a, JSONObject &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const JSONObject& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
