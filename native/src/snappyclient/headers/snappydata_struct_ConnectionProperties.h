/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef SNAPPYDATA_STRUCT_CONNECTIONPROPERTIES_H
#define SNAPPYDATA_STRUCT_CONNECTIONPROPERTIES_H


#include "snappydata_struct_Decimal.h"
#include "snappydata_struct_Timestamp.h"
#include "snappydata_struct_JSONValue.h"
#include "snappydata_struct_JSONObject.h"
#include "snappydata_struct_BlobChunk.h"
#include "snappydata_struct_ClobChunk.h"
#include "snappydata_struct_ServiceMetaData.h"
#include "snappydata_struct_ServiceMetaDataArgs.h"
#include "snappydata_struct_OpenConnectionArgs.h"

#include "snappydata_types.h"

namespace io { namespace snappydata { namespace thrift {

typedef struct _ConnectionProperties__isset {
  _ConnectionProperties__isset() : userName(false), token(false) {}
  bool userName :1;
  bool token :1;
} _ConnectionProperties__isset;

class ConnectionProperties {
 public:

  ConnectionProperties(const ConnectionProperties&);
  ConnectionProperties(ConnectionProperties&&) noexcept;
  ConnectionProperties& operator=(const ConnectionProperties&);
  ConnectionProperties& operator=(ConnectionProperties&&) noexcept;
  ConnectionProperties() : connId(0), clientHostName(), clientID(), userName(), token() {
  }

  virtual ~ConnectionProperties() noexcept;
  int32_t connId;
  std::string clientHostName;
  std::string clientID;
  std::string userName;
  std::string token;

  _ConnectionProperties__isset __isset;

  void __set_connId(const int32_t val);

  void __set_clientHostName(const std::string& val);

  void __set_clientID(const std::string& val);

  void __set_userName(const std::string& val);

  void __set_token(const std::string& val);

  bool operator == (const ConnectionProperties & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(clientHostName == rhs.clientHostName))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const ConnectionProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectionProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ConnectionProperties &a, ConnectionProperties &b) noexcept;

inline std::ostream& operator<<(std::ostream& out, const ConnectionProperties& obj)
{
  obj.printTo(out);
  return out;
}

}}} // namespace

#endif
