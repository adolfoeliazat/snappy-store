/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.snappydata.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class JSONValue extends org.apache.thrift.TUnion<JSONValue, JSONValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JSONValue");
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_val", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_val", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField I32_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_val", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField I64_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_val", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("double_val", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField OBJECT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("object_val", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField ARRAY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("array_val", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField NULL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("null_val", org.apache.thrift.protocol.TType.BOOL, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VAL((short)1, "string_val"),
    BOOL_VAL((short)2, "bool_val"),
    I32_VAL((short)3, "i32_val"),
    I64_VAL((short)4, "i64_val"),
    DOUBLE_VAL((short)5, "double_val"),
    OBJECT_VAL((short)6, "object_val"),
    ARRAY_VAL((short)7, "array_val"),
    NULL_VAL((short)8, "null_val");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_VAL
          return STRING_VAL;
        case 2: // BOOL_VAL
          return BOOL_VAL;
        case 3: // I32_VAL
          return I32_VAL;
        case 4: // I64_VAL
          return I64_VAL;
        case 5: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 6: // OBJECT_VAL
          return OBJECT_VAL;
        case 7: // ARRAY_VAL
          return ARRAY_VAL;
        case 8: // NULL_VAL
          return NULL_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("string_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("bool_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.I32_VAL, new org.apache.thrift.meta_data.FieldMetaData("i32_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_VAL, new org.apache.thrift.meta_data.FieldMetaData("i64_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("double_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OBJECT_VAL, new org.apache.thrift.meta_data.FieldMetaData("object_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "JSONValue"))));
    tmpMap.put(_Fields.ARRAY_VAL, new org.apache.thrift.meta_data.FieldMetaData("array_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "JSONValue"))));
    tmpMap.put(_Fields.NULL_VAL, new org.apache.thrift.meta_data.FieldMetaData("null_val", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JSONValue.class, metaDataMap);
  }

  public JSONValue() {
    super();
  }

  public JSONValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public JSONValue(JSONValue other) {
    super(other);
  }
  public JSONValue deepCopy() {
    return new JSONValue(this);
  }

  public static JSONValue string_val(String value) {
    JSONValue x = new JSONValue();
    x.setString_val(value);
    return x;
  }

  public static JSONValue bool_val(boolean value) {
    JSONValue x = new JSONValue();
    x.setBool_val(value);
    return x;
  }

  public static JSONValue i32_val(int value) {
    JSONValue x = new JSONValue();
    x.setI32_val(value);
    return x;
  }

  public static JSONValue i64_val(long value) {
    JSONValue x = new JSONValue();
    x.setI64_val(value);
    return x;
  }

  public static JSONValue double_val(double value) {
    JSONValue x = new JSONValue();
    x.setDouble_val(value);
    return x;
  }

  public static JSONValue object_val(Map<String,JSONValue> value) {
    JSONValue x = new JSONValue();
    x.setObject_val(value);
    return x;
  }

  public static JSONValue array_val(List<JSONValue> value) {
    JSONValue x = new JSONValue();
    x.setArray_val(value);
    return x;
  }

  public static JSONValue null_val(boolean value) {
    JSONValue x = new JSONValue();
    x.setNull_val(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case STRING_VAL:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'string_val', but got " + value.getClass().getSimpleName());
      case BOOL_VAL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'bool_val', but got " + value.getClass().getSimpleName());
      case I32_VAL:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'i32_val', but got " + value.getClass().getSimpleName());
      case I64_VAL:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'i64_val', but got " + value.getClass().getSimpleName());
      case DOUBLE_VAL:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'double_val', but got " + value.getClass().getSimpleName());
      case OBJECT_VAL:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,JSONValue> for field 'object_val', but got " + value.getClass().getSimpleName());
      case ARRAY_VAL:
        if (value instanceof List) {
          break;
        }
        throw new ClassCastException("Was expecting value of type List<JSONValue> for field 'array_val', but got " + value.getClass().getSimpleName());
      case NULL_VAL:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'null_val', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case STRING_VAL:
          if (field.type == STRING_VAL_FIELD_DESC.type) {
            String string_val;
            string_val = iprot.readString();
            return string_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOL_VAL:
          if (field.type == BOOL_VAL_FIELD_DESC.type) {
            Boolean bool_val;
            bool_val = iprot.readBool();
            return bool_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I32_VAL:
          if (field.type == I32_VAL_FIELD_DESC.type) {
            Integer i32_val;
            i32_val = iprot.readI32();
            return i32_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case I64_VAL:
          if (field.type == I64_VAL_FIELD_DESC.type) {
            Long i64_val;
            i64_val = iprot.readI64();
            return i64_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VAL:
          if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
            Double double_val;
            double_val = iprot.readDouble();
            return double_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OBJECT_VAL:
          if (field.type == OBJECT_VAL_FIELD_DESC.type) {
            Map<String,JSONValue> object_val;
            {
              org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
              object_val = new HashMap<String,JSONValue>(2*_map0.size);
              String _key1;
              JSONValue _val2;
              for (int _i3 = 0; _i3 < _map0.size; ++_i3)
              {
                _key1 = iprot.readString();
                _val2 = new JSONValue();
                _val2.read(iprot);
                object_val.put(_key1, _val2);
              }
              iprot.readMapEnd();
            }
            return object_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ARRAY_VAL:
          if (field.type == ARRAY_VAL_FIELD_DESC.type) {
            List<JSONValue> array_val;
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              array_val = new ArrayList<JSONValue>(_list4.size);
              JSONValue _elem5;
              for (int _i6 = 0; _i6 < _list4.size; ++_i6)
              {
                _elem5 = new JSONValue();
                _elem5.read(iprot);
                array_val.add(_elem5);
              }
              iprot.readListEnd();
            }
            return array_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NULL_VAL:
          if (field.type == NULL_VAL_FIELD_DESC.type) {
            Boolean null_val;
            null_val = iprot.readBool();
            return null_val;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VAL:
        String string_val = (String)value_;
        oprot.writeString(string_val);
        return;
      case BOOL_VAL:
        Boolean bool_val = (Boolean)value_;
        oprot.writeBool(bool_val);
        return;
      case I32_VAL:
        Integer i32_val = (Integer)value_;
        oprot.writeI32(i32_val);
        return;
      case I64_VAL:
        Long i64_val = (Long)value_;
        oprot.writeI64(i64_val);
        return;
      case DOUBLE_VAL:
        Double double_val = (Double)value_;
        oprot.writeDouble(double_val);
        return;
      case OBJECT_VAL:
        Map<String,JSONValue> object_val = (Map<String,JSONValue>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, object_val.size()));
          for (Map.Entry<String, JSONValue> _iter7 : object_val.entrySet())
          {
            oprot.writeString(_iter7.getKey());
            _iter7.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case ARRAY_VAL:
        List<JSONValue> array_val = (List<JSONValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, array_val.size()));
          for (JSONValue _iter8 : array_val)
          {
            _iter8.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case NULL_VAL:
        Boolean null_val = (Boolean)value_;
        oprot.writeBool(null_val);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case STRING_VAL:
          String string_val;
          string_val = iprot.readString();
          return string_val;
        case BOOL_VAL:
          Boolean bool_val;
          bool_val = iprot.readBool();
          return bool_val;
        case I32_VAL:
          Integer i32_val;
          i32_val = iprot.readI32();
          return i32_val;
        case I64_VAL:
          Long i64_val;
          i64_val = iprot.readI64();
          return i64_val;
        case DOUBLE_VAL:
          Double double_val;
          double_val = iprot.readDouble();
          return double_val;
        case OBJECT_VAL:
          Map<String,JSONValue> object_val;
          {
            org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
            object_val = new HashMap<String,JSONValue>(2*_map9.size);
            String _key10;
            JSONValue _val11;
            for (int _i12 = 0; _i12 < _map9.size; ++_i12)
            {
              _key10 = iprot.readString();
              _val11 = new JSONValue();
              _val11.read(iprot);
              object_val.put(_key10, _val11);
            }
            iprot.readMapEnd();
          }
          return object_val;
        case ARRAY_VAL:
          List<JSONValue> array_val;
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin();
            array_val = new ArrayList<JSONValue>(_list13.size);
            JSONValue _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new JSONValue();
              _elem14.read(iprot);
              array_val.add(_elem14);
            }
            iprot.readListEnd();
          }
          return array_val;
        case NULL_VAL:
          Boolean null_val;
          null_val = iprot.readBool();
          return null_val;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case STRING_VAL:
        String string_val = (String)value_;
        oprot.writeString(string_val);
        return;
      case BOOL_VAL:
        Boolean bool_val = (Boolean)value_;
        oprot.writeBool(bool_val);
        return;
      case I32_VAL:
        Integer i32_val = (Integer)value_;
        oprot.writeI32(i32_val);
        return;
      case I64_VAL:
        Long i64_val = (Long)value_;
        oprot.writeI64(i64_val);
        return;
      case DOUBLE_VAL:
        Double double_val = (Double)value_;
        oprot.writeDouble(double_val);
        return;
      case OBJECT_VAL:
        Map<String,JSONValue> object_val = (Map<String,JSONValue>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, object_val.size()));
          for (Map.Entry<String, JSONValue> _iter16 : object_val.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            _iter16.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      case ARRAY_VAL:
        List<JSONValue> array_val = (List<JSONValue>)value_;
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, array_val.size()));
          for (JSONValue _iter17 : array_val)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case NULL_VAL:
        Boolean null_val = (Boolean)value_;
        oprot.writeBool(null_val);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case STRING_VAL:
        return STRING_VAL_FIELD_DESC;
      case BOOL_VAL:
        return BOOL_VAL_FIELD_DESC;
      case I32_VAL:
        return I32_VAL_FIELD_DESC;
      case I64_VAL:
        return I64_VAL_FIELD_DESC;
      case DOUBLE_VAL:
        return DOUBLE_VAL_FIELD_DESC;
      case OBJECT_VAL:
        return OBJECT_VAL_FIELD_DESC;
      case ARRAY_VAL:
        return ARRAY_VAL_FIELD_DESC;
      case NULL_VAL:
        return NULL_VAL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public String getString_val() {
    if (getSetField() == _Fields.STRING_VAL) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'string_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setString_val(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_VAL;
    value_ = value;
  }

  public boolean getBool_val() {
    if (getSetField() == _Fields.BOOL_VAL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bool_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBool_val(boolean value) {
    setField_ = _Fields.BOOL_VAL;
    value_ = value;
  }

  public int getI32_val() {
    if (getSetField() == _Fields.I32_VAL) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i32_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI32_val(int value) {
    setField_ = _Fields.I32_VAL;
    value_ = value;
  }

  public long getI64_val() {
    if (getSetField() == _Fields.I64_VAL) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'i64_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setI64_val(long value) {
    setField_ = _Fields.I64_VAL;
    value_ = value;
  }

  public double getDouble_val() {
    if (getSetField() == _Fields.DOUBLE_VAL) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'double_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDouble_val(double value) {
    setField_ = _Fields.DOUBLE_VAL;
    value_ = value;
  }

  public Map<String,JSONValue> getObject_val() {
    if (getSetField() == _Fields.OBJECT_VAL) {
      return (Map<String,JSONValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'object_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setObject_val(Map<String,JSONValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.OBJECT_VAL;
    value_ = value;
  }

  public List<JSONValue> getArray_val() {
    if (getSetField() == _Fields.ARRAY_VAL) {
      return (List<JSONValue>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'array_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setArray_val(List<JSONValue> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ARRAY_VAL;
    value_ = value;
  }

  public boolean getNull_val() {
    if (getSetField() == _Fields.NULL_VAL) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'null_val' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNull_val(boolean value) {
    setField_ = _Fields.NULL_VAL;
    value_ = value;
  }

  public boolean isSetString_val() {
    return setField_ == _Fields.STRING_VAL;
  }


  public boolean isSetBool_val() {
    return setField_ == _Fields.BOOL_VAL;
  }


  public boolean isSetI32_val() {
    return setField_ == _Fields.I32_VAL;
  }


  public boolean isSetI64_val() {
    return setField_ == _Fields.I64_VAL;
  }


  public boolean isSetDouble_val() {
    return setField_ == _Fields.DOUBLE_VAL;
  }


  public boolean isSetObject_val() {
    return setField_ == _Fields.OBJECT_VAL;
  }


  public boolean isSetArray_val() {
    return setField_ == _Fields.ARRAY_VAL;
  }


  public boolean isSetNull_val() {
    return setField_ == _Fields.NULL_VAL;
  }


  public boolean equals(Object other) {
    if (other instanceof JSONValue) {
      return equals((JSONValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(JSONValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(JSONValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
